섹션4 HTTP 메서드

[HTTP API를 만들어보자] 쭉 읽어보기
URI API 설계를 해보자(즉 URL)

회원 목록 조회 : /read-member-list
회원 조회 : /read-member-by-id
회원 등록 : /create-member
회원 수정 : /update-member
회원 삭제 : /delete-member

이렇게 하면 안됨
-> URI의 의미는 리소스 식별자임
-> 리소스는 read-member, ???-member 가 아니라 "member"자체가 리소스임
-> "member"라는 리소스만 식별하도록

그럼 전부다 /member이렇게 쓰라는건가 
어떻게 구현하라는건가


=> "리소스"와 행위"를 분리 하라
리소스 : member
행위 : 조회, 등록, 수정, 삭제
-> 리소스는 URL로 식별
-> 행위는 HTTP 메서드로 구분




[HTTP 메서드 - GET, POST]
클라이언트 메서드 : 클라이언트가 서버에 요청할때 기대하는 행동

주요메서드
GET : resource 조회
POST : 요청 데이터 처리, 주로 등록에 사용(이 데이터 등록해줘)
PUT : resource를 대체, 해당 리소스가 없으면 생성(덮어쓰기or생성)
PATCH : 리소스 부분 변경(수정)
DELETE : 리소스 삭제

기타메서드
HEAD, OPTIONS, CONNECT, TRACE



GET
- 리소스 조회

- 서버에 전달하고 싶은 데이터는 query(쿼리 파라미터)로 전달
ex) GET /members/100 HTTP/1.1	//100번멤버를 주세요
//서버가 100번 멤버를 HTTP응답메시지 형식으로 줌
- 메세지 바디가 존재하지 않음

POST
- 요청 데이터 처리(주로 신규데이터 등록해달라고 할 때)

- HTTP메세지 구조 중 메시지 바디를 통해 데이터 전달 
//서버가 처리했다는 정보를 담은 HTTP응답메시지를 다시 반환

- 어떻게 처리할 것인지(어떤 목적으로 쓰느냐에 따라)
//여러 기능 가능 _등록, 게시판글쓰기, 댓글달기, 주문 등등
// 또는 다른 메서드로 처리하기 애매한 경우
// 또는 기타등등 잡다한 경우
* POST는 (일단)모든게 가능


[HTTP 메서드 - PUT, PATCH, DELETE]

PUT
- resource를 대체
-> 해당 리소스가 없으면 생성, 있으면 덮어쓰기(생성or덮어쓰기)
ex) member 100을 PUT -> 없으면 생성, 있으면 덮어씀(완전히 대체)

- 위의 예시에서 POST의 경우는 URI에서 /member에다 넣어달라고 한 반면,
PUT은 /member/100에다 넣어달라 하는 것이 차이점

* 주의점
- 완전히 대체 : 리소스수정시, 수정할 값만 보내면 안되고 수정값포함 전체를 보내야함
=> PUT은 수정할 때 쓰기보단 완전히 갈아치울때 씀 _수정시엔 PATCH


PATCH
- 수정할 때 씀 _리소스 부분 변경
- 수정할 값만 보내도 됨
- HTTP에서 PATCH지원 안되는 경우 POST사용


DELETE
- 리소스 제거


=> 다시 요약
GET : resource 조회
POST : 요청 데이터 처리, 주로 등록에 사용(이 데이터 등록해줘)
PUT : resource를 대체, 해당 리소스가 없으면 생성(덮어쓰기or생성)(수정?)
PATCH : 리소스 부분 변경(수정)(부분수정?)
DELETE : 리소스 삭제




[HTTP 메서드의 속성]

- 안전(Safe Methods)
- 멱등(dempotent Methods)
- 캐시가능(Cacheable Methods)

안전
- 호출해도 리소스를 변경하지 않는다
- GET, HEAD 메서드에 해당

멱등
- 한 번 호출하든, 두 번 호출하든, 100번 호출하든, 결과는 똑같다.
- GET, PUT, DELETE 메서드에 해당
- POST는 해당 안됨 _중복 호출되면 결제를 여러번 할 수도...
- 활용 : 자동 복구 매커니즘 _에러발생시 재시도

캐시가능
- 응답 결과 resource를 캐시해서 사용해도 되는가?
- GET, HEAD, POST, PATCH 메서드 캐시가능
// 실제로는 GET, HEAD정도만 캐시로 사용




















