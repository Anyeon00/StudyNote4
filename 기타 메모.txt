커스텀 매크로
: Settings의 LiveTemplates에 만들기 가능

css붙여넣기
1. getbootstrap.com - download - CSS and JS 부분 download
2. css, js폴더 묶어서, resources 패키지 - static패키지에 붙여넣기
3. resources파일 우클릭, reload from disk 클릭
4. Build - Build Project


Entity의 데이터 멤버에 null이 들어갈 수 있도록
long -> Long
int -> Integer
로 사용

test
Assertions.assertThat(비교할객체1).isEqualTo(비교할객체2);
* 동일성(주소)비교X, 동등성비교
Assertions.assertThrow(XXXException.class, () -> 실행할메서드);


사용 exception
1. IllegalStateException _회원 가입시 중복회원일때
2. RuntimeException _재고를 뺐을때 0보다 적은 경우(extends해서 NotEnoughStockException 만듦)


객체지향적으로 비즈니스 로직을 서비스클래스와 엔터티클래스에 맞춰서 나눠 작성(도메인 모델 패턴)
* 응집력있게, 유지보수관점


@RequestMapping
: Get매핑으로 오든 Post매핑으로 오든 다 처리 가능함

@RestController
: 반환값인 String이 뷰의 논리이름으로 사용되는게 아닌, HTTP 메시지 바디에 입력할 값으로

war
: jsp사용시 또는 톰캣서버 따로 설치시

jar
: 내장 서버(톰캣)사용시, 주로 jar사용


Optional객체 사용 예
아이디로 회원 찾기 _결과가 null일 수도 있음
public Optional<Member> findByLonginId(String loginId) {
  List<Member> all = findAll();
  for (Member m : all) {
    if (m.getLoginId().equals(loginId)) {
      return Optional.of(m);
    }
  }
  return Optional.empty();
}
* 위 함수 바디를 간단하게 작성하면 아래와 같음
return findAll().stream().filter(m -> m.getLoginId().equals(loginId)).findFirst();
//stream() : 배열을 stream으로 바꿔줌
//filter().findFirst() : 람다식으로, iter문에서 조건에 맞는 첫번째거 return
//마지막에 .orElse(null) : 못찾으면 null 반환
* Optional에서 꺼내기
Member member = 옵셔널객체.get();
